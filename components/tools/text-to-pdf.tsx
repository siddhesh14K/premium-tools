"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Slider } from "@/components/ui/slider"
import { ArrowLeft, FileText, Download, Eye, Settings, Type } from "lucide-react"
import Link from "next/link"
import { motion } from "framer-motion"
import jsPDF from "jspdf"

export function TextToPDF() {
  const [text, setText] = useState(
    `Welcome to Exact Tools!

This is a sample document created using our professional Text to PDF converter. You can customize every aspect of your document to create stunning, professional-looking PDFs.

Key Features:
• Custom font selection and sizing
• Adjustable margins and spacing
• Professional formatting options
• Instant preview and download
• Mobile-friendly interface
• High-quality output

Getting Started:
1. Replace this sample text with your content
2. Customize the formatting options on the right
3. Preview your document before downloading
4. Download your professional PDF

Why Choose Exact Tools?
Our Text to PDF converter is designed for professionals who need reliable, high-quality results. Whether you're creating reports, letters, documentation, or any other text-based document, our tool delivers exactly what you need.

Start typing your content above to see the magic happen! Your document will be formatted beautifully and ready for download in seconds.

Thank you for choosing Exact Tools - where precision meets simplicity.`,
  )
  const [title, setTitle] = useState("Professional Document")
  const [fontSize, setFontSize] = useState([12])
  const [titleSize, setTitleSize] = useState([18])
  const [fontFamily, setFontFamily] = useState("helvetica")
  const [lineSpacing, setLineSpacing] = useState([1.5])
  const [margins, setMargins] = useState([20])
  const [isGenerating, setIsGenerating] = useState(false)
  const [wordCount, setWordCount] = useState(0)
  const [charCount, setCharCount] = useState(0)
  const [pdfPreview, setPdfPreview] = useState<string | null>(null)

  // Update word and character count
  const updateCounts = (text: string) => {
    setCharCount(text.length)
    setWordCount(text.trim() ? text.trim().split(/\s+/).length : 0)
  }

  const handleTextChange = (value: string) => {
    setText(value)
    updateCounts(value)
  }

  const generatePDF = (preview = false) => {
    setIsGenerating(true)

    try {
      const doc = new jsPDF()
      const pageWidth = doc.internal.pageSize.getWidth()
      const pageHeight = doc.internal.pageSize.getHeight()
      const margin = margins[0]
      const contentWidth = pageWidth - margin * 2

      // Set font
      doc.setFont(fontFamily)

      // Add title
      let currentY = margin + fontSize[0]
      if (title.trim()) {
        doc.setFontSize(titleSize[0])
        doc.setFont(fontFamily, "bold")

        const titleLines = doc.splitTextToSize(title, contentWidth)
        doc.text(titleLines, margin, currentY)
        currentY += titleSize[0] + titleSize[0] * 0.5
      }

      // Add content
      doc.setFontSize(fontSize[0])
      doc.setFont(fontFamily, "normal")

      const paragraphs = text.split("\n\n")

      paragraphs.forEach((paragraph, index) => {
        if (paragraph.trim()) {
          const lines = doc.splitTextToSize(paragraph.trim(), contentWidth)

          // Check if we need a new page
          if (currentY + lines.length * fontSize[0] * lineSpacing[0] > pageHeight - margin) {
            doc.addPage()
            currentY = margin + fontSize[0]
          }

          lines.forEach((line: string) => {
            doc.text(line, margin, currentY)
            currentY += fontSize[0] * lineSpacing[0]
          })

          // Add paragraph spacing
          if (index < paragraphs.length - 1) {
            currentY += fontSize[0] * 0.5
          }
        }
      })

      // Add footer
      const pageCount = doc.internal.getNumberOfPages()
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i)
        doc.setFontSize(8)
        doc.setFont(fontFamily, "normal")
        doc.text(`Generated by Exact Tools - Page ${i} of ${pageCount}`, margin, pageHeight - 10)
        doc.text(new Date().toLocaleDateString(), pageWidth - margin - 30, pageHeight - 10)
      }

      if (preview) {
        // Create preview
        const pdfBlob = doc.output("blob")
        const url = URL.createObjectURL(pdfBlob)
        setPdfPreview(url)
      } else {
        // Download the PDF
        const filename = title.replace(/[^a-z0-9]/gi, "_").toLowerCase() || "document"
        doc.save(`${filename}.pdf`)
      }
    } catch (error) {
      console.error("Error generating PDF:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  const estimatedPages = Math.ceil(text.length / 2000) // Rough estimate

  return (
    <div className="min-h-screen bg-gradient-to-br from-teal-50 via-white to-cyan-50 dark:from-slate-900 dark:to-slate-800 py-8 px-4">
      <div className="container mx-auto max-w-7xl">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <Link href="/" className="inline-flex items-center text-blue-600 hover:text-blue-700 mb-6 font-medium">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Tools
          </Link>
          <h1 className="text-5xl font-black text-gray-900 dark:text-white mb-4 bg-gradient-to-r from-teal-600 to-cyan-600 bg-clip-text text-transparent">
            Text to PDF Converter
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 leading-relaxed">
            Convert your formatted text into beautiful, professional PDF documents with custom styling.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
            className="lg:col-span-2"
          >
            <Card className="shadow-2xl border-0 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-3 text-2xl">
                  <div className="p-2 bg-gradient-to-r from-teal-500 to-cyan-500 text-white rounded-lg">
                    <FileText className="w-6 h-6" />
                  </div>
                  Document Content
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label htmlFor="title" className="text-lg font-semibold">
                    Document Title
                  </Label>
                  <Input
                    id="title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="Enter document title"
                    className="text-lg mt-2"
                  />
                </div>

                <div>
                  <Label htmlFor="content" className="text-lg font-semibold">
                    Document Content
                  </Label>
                  <Textarea
                    id="content"
                    value={text}
                    onChange={(e) => handleTextChange(e.target.value)}
                    placeholder="Enter your text content here..."
                    rows={20}
                    className="font-mono text-sm mt-2 leading-relaxed"
                  />
                  <div className="flex justify-between text-sm text-gray-500 mt-2">
                    <span>
                      {charCount} characters, {wordCount} words
                    </span>
                    <span>~{estimatedPages} pages</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.4 }}
            className="space-y-6"
          >
            <Card className="shadow-2xl border-0 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-xl">
                  <Settings className="w-5 h-5" />
                  Formatting Options
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label htmlFor="fontFamily" className="font-semibold">
                    Font Family
                  </Label>
                  <Select value={fontFamily} onValueChange={setFontFamily}>
                    <SelectTrigger className="mt-2">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="helvetica">Helvetica</SelectItem>
                      <SelectItem value="times">Times New Roman</SelectItem>
                      <SelectItem value="courier">Courier</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label className="font-semibold">Title Font Size: {titleSize[0]}pt</Label>
                  <Slider value={titleSize} onValueChange={setTitleSize} max={32} min={14} step={1} className="mt-2" />
                </div>

                <div>
                  <Label className="font-semibold">Body Font Size: {fontSize[0]}pt</Label>
                  <Slider value={fontSize} onValueChange={setFontSize} max={24} min={8} step={1} className="mt-2" />
                </div>

                <div>
                  <Label className="font-semibold">Line Spacing: {lineSpacing[0]}x</Label>
                  <Slider
                    value={lineSpacing}
                    onValueChange={setLineSpacing}
                    max={3}
                    min={1}
                    step={0.1}
                    className="mt-2"
                  />
                </div>

                <div>
                  <Label className="font-semibold">Margins: {margins[0]}pt</Label>
                  <Slider value={margins} onValueChange={setMargins} max={50} min={10} step={5} className="mt-2" />
                </div>
              </CardContent>
            </Card>

            <Card className="shadow-2xl border-0 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-xl">
                  <Type className="w-5 h-5" />
                  Actions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button
                  onClick={() => generatePDF(true)}
                  variant="outline"
                  className="w-full flex items-center gap-2 border-2 border-teal-500 text-teal-600 hover:bg-teal-50"
                  disabled={!text.trim() || isGenerating}
                >
                  <Eye className="w-4 h-4" />
                  Preview PDF
                </Button>

                <Button
                  onClick={() => generatePDF(false)}
                  className="w-full flex items-center gap-2 bg-gradient-to-r from-teal-500 to-cyan-500 hover:from-teal-600 hover:to-cyan-600 text-white"
                  disabled={isGenerating || !text.trim()}
                >
                  <Download className="w-4 h-4" />
                  {isGenerating ? "Generating..." : "Download PDF"}
                </Button>
              </CardContent>
            </Card>

            <div className="p-6 bg-gradient-to-r from-teal-50 to-cyan-50 dark:from-teal-900/20 dark:to-cyan-900/20 rounded-2xl">
              <h3 className="font-bold text-teal-900 dark:text-teal-100 mb-3 flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Pro Tips:
              </h3>
              <ul className="text-sm text-teal-800 dark:text-teal-200 space-y-2">
                <li>• Use double line breaks to separate paragraphs</li>
                <li>• Larger title sizes create better hierarchy</li>
                <li>• Preview before downloading to check formatting</li>
                <li>• Adjust line spacing for better readability</li>
                <li>• Use appropriate margins for professional look</li>
              </ul>
            </div>
          </motion.div>
        </div>
        {pdfPreview && (
          <div className="mt-6">
            <h3 className="font-bold text-teal-900 dark:text-teal-100 mb-3">PDF Preview:</h3>
            <iframe src={pdfPreview} className="w-full h-96 border rounded-lg" title="PDF Preview" />
          </div>
        )}
      </div>
    </div>
  )
}
